@page "/"
@using BanAppealManager.Main.Scrapers.Forums.Category
@using BanAppealManager.Main
@using BanAppealManager.Main.Models

@inject BanAppealService BanAppealService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h3>Welcome to Ban Appeal Processor</h3>

<div class="container mt-5">
    <div class="d-flex justify-content-between mb-3">
        <h4>Outstanding Ban Appeals</h4>
        <button class="btn btn-primary" @onclick="RefreshAppeals" disabled="@isAppealsLoading">
            @if (isAppealsLoading)
            {
                <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                <span role="status">Loading...</span>
            }
            else
            {
                <span>Refresh Appeals</span>
            }
        </button>
    </div>

    @if (isAppealsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading appeals...</span>
            </div>
        </div>
    }
    else if (appeals == null || !appeals.Any())
    {
        <p>No outstanding appeals found.</p>
    }
    else
    {
        <table class="table table-striped mt-4">
            <thead>
                <tr>
                    <th>Post Name</th>
                    <th>Original Poster</th>
                    <th>Created</th>
                    <th>Age (days)</th>
                    <th>Process</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appeal in sortedAppeals)
                {
                    <tr class="@GetRowClass(CalculateAge(appeal.Created))">
                        <td><a href="@appeal.LinkToAppeal" target="_blank">@appeal.PostName</a></td>
                        <td>@appeal.OriginalPoster</td>
                        <td>@appeal.Created</td>
                        <td>@CalculateAge(appeal.Created)</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ProcessAppeal(appeal.LinkToAppeal)">Process</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <hr />

    <div class="d-flex justify-content-between mb-3">
        <h4>Outstanding Ban Appeal Discussions</h4>
        <button class="btn btn-primary" @onclick="RefreshDiscussions" disabled="@isDiscussionsLoading">
            @if (isDiscussionsLoading)
            {
                <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                <span role="status">Loading...</span>
            }
            else
            {
                <span>Refresh Discussions</span>
            }
        </button>
    </div>

    @if (isDiscussionsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading discussions...</span>
            </div>
        </div>
    }
    else if (discussions == null || !discussions.Any())
    {
        <p>No outstanding discussions found.</p>
    }
    else
    {
        <table class="table table-striped mt-4">
            <thead>
                <tr>
                    <th>Post Name</th>
                    <th>Replies</th>
                    <th>Created</th>
                    <th>Age (days)</th>
                    <th>Process</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var discussion in sortedDiscussions)
                {
                    <tr class="@GetRowClass(CalculateAge(discussion.Created))">
                        <td><a href="@discussion.LinkToDiscussion" target="_blank">@discussion.PostName</a></td>
                        <td>@discussion.Replies</td>
                        <td>@discussion.Created</td>
                        <td>@CalculateAge(discussion.Created)</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => ProcessDiscussion(discussion.LinkToDiscussion)">Process</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<AppealSummary> appeals;
    private List<AppealSummary> sortedAppeals;
    private List<DiscussionSummary> discussions;
    private List<DiscussionSummary> sortedDiscussions;
    private bool isAppealsLoading = false;
    private bool isDiscussionsLoading = false;

    protected override void OnInitialized()
    {
        // Initialize the tables empty
        appeals = new List<AppealSummary>();
        discussions = new List<DiscussionSummary>();
        sortedAppeals = new List<AppealSummary>();
        sortedDiscussions = new List<DiscussionSummary>();
    }

    private async Task RefreshAppeals()
    {
        isAppealsLoading = true;
        StateHasChanged(); // Force re-render to show loading spinner
        try
        {
            appeals = await BanAppealService.GetOutstandingAppealsAsync();
            sortedAppeals = appeals.OrderByDescending(a => CalculateAge(a.Created)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing appeals: {ex.Message}");
        }
        finally
        {
            isAppealsLoading = false;
            StateHasChanged(); // Force re-render to hide loading spinner
        }
    }

    private async Task RefreshDiscussions()
    {
        isDiscussionsLoading = true;
        StateHasChanged(); // Force re-render to show loading spinner
        try
        {
            discussions = await BanAppealService.GetOutstandingAppealDiscussionsAsync();
            sortedDiscussions = discussions.OrderByDescending(d => CalculateAge(d.Created)).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing discussions: {ex.Message}");
        }
        finally
        {
            isDiscussionsLoading = false;
            StateHasChanged(); // Force re-render to hide loading spinner
        }
    }

    private int CalculateAge(string created)
    {
        if (DateTime.TryParse(created, out var createdDate))
        {
            return (DateTime.Now - createdDate).Days;
        }
        return -1; // Return -1 if the date is invalid
    }

    private async Task ProcessAppeal(string appealUrl)
    {
        var processUrl = $"/processappeal?url={Uri.EscapeDataString(appealUrl)}";
        await JS.InvokeVoidAsync("open", processUrl, "_blank");
        await JS.InvokeVoidAsync("open", appealUrl, "_blank");
    }

    private async Task ProcessDiscussion(string discussionUrl)
    {
        var processDiscussionUrl = $"/processdiscussion?url={Uri.EscapeDataString(discussionUrl)}";
        await JS.InvokeVoidAsync("open", processDiscussionUrl, "_blank");
    }

    private string GetRowClass(int age)
    {
        return age switch
        {
            > 7 => "table-danger",
            > 3 => "table-warning",
            > 0 => "table-info",
            0 => "table-success",
            _ => string.Empty
        };
    }
}
